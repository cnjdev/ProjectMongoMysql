package com.mycompany.app.controller;
 
import java.util.List;
import java.util.Optional;
 
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;
 
import com.mycompany.app.model.*;
import com.mycompany.app.repo.*;
import com.mycompany.app.util.CustomErrorType;
 
@RestController
@RequestMapping("/api")
public class RestApiController {
 
    public static final Logger logger = LoggerFactory.getLogger(RestApiController.class);
  
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data

	@Autowired
	private UserRepository userRepository; 
 
    @Autowired
    private CustomerRepository custRepository;
 
    // -------------------Retrieve All Users---------------------------------------------
 
    @RequestMapping(value = "/user/all", method = RequestMethod.GET)
    public ResponseEntity<List<User>> listAllUsers() {
        logger.info("Fetching all Users");
        
        // This returns a JSON or XML with the users
		List<User> users = userRepository.findAll();
        if (users.isEmpty()) {
            return new ResponseEntity(HttpStatus.NO_CONTENT);
            // You many decide to return HttpStatus.NOT_FOUND
        }
        
        return new ResponseEntity<List<User>>(users, HttpStatus.OK);
    }
 
    // -------------------Retrieve All Customers ---------------------------------------------
 
    @RequestMapping(value = "/cust/all", method = RequestMethod.GET)
    public ResponseEntity<List<Customer>> listAllCustomers() {
        logger.info("Fetching all Customers");
        
        // This returns a JSON or XML with the users
		List<Customer> customers = custRepository.findAll();
        if (customers.isEmpty()) {
            return new ResponseEntity(HttpStatus.NO_CONTENT);
            // You many decide to return HttpStatus.NOT_FOUND
        }
        
        return new ResponseEntity<List<Customer>>(customers, HttpStatus.OK);
    }
 
    // -------------------Retrieve Single User------------------------------------------
 
    @RequestMapping(value = "/user/{id}", method = RequestMethod.GET)
    public ResponseEntity<?> getUser(@PathVariable("id") long id) {
        logger.info("Fetching User with id {}", id);
        
        Optional<User> optUser = userRepository.findById(id);
        if (!optUser.isPresent()) {
            logger.error("User with id {} not found.", id);
            return new ResponseEntity(new CustomErrorType("User with id " + id 
                    + " not found"), HttpStatus.NOT_FOUND);
        }
        
        User user = optUser.get();
        return new ResponseEntity<User>(user, HttpStatus.OK);
    }
    
    // -------------------Retrieve Single Customer ------------------------------------------
 
    @RequestMapping(value = "/cust/{id}", method = RequestMethod.GET)
    public ResponseEntity<?> getCustomer(@PathVariable("id") String id) {
        logger.info("Fetching Customer with id {}", id);
        
        Optional<Customer> optCust = custRepository.findById(id);
        if (!optCust.isPresent()) {
            logger.error("Customer with id {} not found.", id);
            return new ResponseEntity(new CustomErrorType("Customer with id " + id 
                    + " not found"), HttpStatus.NOT_FOUND);
        }
        
        Customer customer = optCust.get();
        return new ResponseEntity<Customer>(customer, HttpStatus.OK);
    }    
    
    // ----------------- Find User By Name -----------------------------------------
    @RequestMapping(path="/user/find", method = RequestMethod.GET)
    public ResponseEntity<?> findUser(@RequestParam String name) {
        logger.info("Searching for users");
        
        List<User> users = userRepository.findByName(name);
        if (users.isEmpty()) {
            return new ResponseEntity(HttpStatus.NO_CONTENT);
            // You many decide to return HttpStatus.NOT_FOUND
        }
        
        return new ResponseEntity<List<User>>(users, HttpStatus.OK);
    }
    
        // ----------------- Find Customer By Name -----------------------------------------
    @RequestMapping(path="/cust/find", method = RequestMethod.GET)
    public ResponseEntity<?> findByName(@RequestParam String first, @RequestParam String last) {
        logger.info("Searching for customers");
        
        List<Customer> customers = custRepository.findByName(first, last);
        if (customers.isEmpty()) {
            return new ResponseEntity(HttpStatus.NO_CONTENT);
            // You many decide to return HttpStatus.NOT_FOUND
        }
        
        return new ResponseEntity<List<Customer>>(customers, HttpStatus.OK);
    }
    
    // -------------- Find Customer By First Name -----------------------------------------
    @RequestMapping(path="/cust/find/first/{name}", method = RequestMethod.GET)
    public ResponseEntity<?> findByFirstName(@PathVariable("name") String name) {
        logger.info("Searching for customers");
        
        List<Customer> customers = custRepository.findByFirstName(name);
        if (customers.isEmpty()) {
            return new ResponseEntity(HttpStatus.NO_CONTENT);
            // You many decide to return HttpStatus.NOT_FOUND
        }
        
        return new ResponseEntity<List<Customer>>(customers, HttpStatus.OK);
    }    
    
    // -------------- Find Customer By Last Name -----------------------------------------
    @RequestMapping(path="/cust/find/last/{name}", method = RequestMethod.GET)
    public ResponseEntity<?> findByLastName(@PathVariable("name") String name) {
        logger.info("Searching for customers");
        
        List<Customer> customers = custRepository.findByLastName(name);
        if (customers.isEmpty()) {
            return new ResponseEntity(HttpStatus.NO_CONTENT);
            // You many decide to return HttpStatus.NOT_FOUND
        }
        
        return new ResponseEntity<List<Customer>>(customers, HttpStatus.OK);
    }  
    
    // ----------------- Add New User with GET request ----------------------------------
    
    @RequestMapping(path="/user/add", method = RequestMethod.GET) 
	public ResponseEntity<?> addNewUser 
	    (@RequestParam String name, @RequestParam int age, @RequestParam double salary, UriComponentsBuilder ucBuilder) {
		// @RequestParam means it is a parameter from the GET or POST request
        logger.info("Creating User");

		User n = new User();
		n.setName(name);
		n.setAge(age);
		n.setSalary(salary);
		userRepository.save(n);
		
        HttpHeaders headers = new HttpHeaders();
        headers.setLocation(ucBuilder.path("/api/user/{id}").buildAndExpand(n.getId()).toUri());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
	}
	
	// ---------------- Add New Customer with GET request ------------------------------
	
	@RequestMapping(path="/cust/add", method = RequestMethod.GET)
	public ResponseEntity<?> addNewCustomer
	    (@RequestParam String id, @RequestParam String firstName, @RequestParam String lastName, UriComponentsBuilder ucBuilder) {
	        
	    logger.info("Creating Customer");
	    
	    Customer c = new Customer();
	    c.setId(id);
	    c.setFirstName(firstName);
	    c.setLastName(lastName);
	    custRepository.save(c);
	    
        HttpHeaders headers = new HttpHeaders();
        headers.setLocation(ucBuilder.path("/api/cust/{id}").buildAndExpand(c.getId()).toUri());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);    
    }
	
    // -------------------Create a User-------------------------------------------
 
    @RequestMapping(value = "/user/new", method = RequestMethod.POST)
    public ResponseEntity<?> createUser(@RequestBody User user, UriComponentsBuilder ucBuilder) {
        logger.info("Creating User : {}", user);
 
        /*
        if (userService.isUserExist(user)) {
            logger.error("Unable to create. A User with name {} already exist", user.getName());
            return new ResponseEntity(new CustomErrorType("Unable to create. A User with name " + 
            user.getName() + " already exist."),HttpStatus.CONFLICT);
        }
        */
        
        userRepository.save(user);
 
        HttpHeaders headers = new HttpHeaders();
        headers.setLocation(ucBuilder.path("/api/user/{id}").buildAndExpand(user.getId()).toUri());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
 
    // ----------------- Create a Customer ----------------------------------------------
    
    @RequestMapping(value = "/cust/new", method = RequestMethod.POST)
    public ResponseEntity<?> createCustomer(@RequestBody Customer customer, UriComponentsBuilder ucBuilder) {
        logger.info("Creating Customer : {}", customer);
        
        custRepository.save(customer);
        
        HttpHeaders headers = new HttpHeaders();
        headers.setLocation(ucBuilder.path("/api/cust/{id}").buildAndExpand(customer.getId()).toUri());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);    
    }
 
    // ------------------- Update a User ------------------------------------------------
 
    @RequestMapping(value = "/user/{id}", method = RequestMethod.PUT)
    public ResponseEntity<?> updateUser(@PathVariable("id") long id, @RequestBody User user) {
        logger.info("Updating User with id {}", id);
 
        Optional<User> optCurrentUser = userRepository.findById(id);
 
        if (!optCurrentUser.isPresent()) {
            logger.error("Unable to update. User with id {} not found.", id);
            return new ResponseEntity(new CustomErrorType("Unable to upate. User with id " + id + " not found."),
                    HttpStatus.NOT_FOUND);
        }
 
        User currentUser = optCurrentUser.get();
        currentUser.setName(user.getName());
        currentUser.setAge(user.getAge());
        currentUser.setSalary(user.getSalary());
 
        userRepository.save(currentUser);
        return new ResponseEntity<User>(currentUser, HttpStatus.OK);
    }
 
    // ------------------- Update a Customer ------------------------------------------------
 
    @RequestMapping(value = "/cust/{id}", method = RequestMethod.PUT)
    public ResponseEntity<?> updateCustomer(@PathVariable("id") String id, @RequestBody Customer customer) {
        logger.info("Updating Customer with id {}", id);
 
        Optional<Customer> optCustomer = custRepository.findById(id);
 
        if (!optCustomer.isPresent()) {
            logger.error("Unable to update. Customer with id {} not found.", id);
            return new ResponseEntity(new CustomErrorType("Unable to upate. User with id " + id + " not found."),
                    HttpStatus.NOT_FOUND);
        }
 
        Customer currCustomer = optCustomer.get();
        currCustomer.setFirstName(customer.getFirstName());
        currCustomer.setLastName(customer.getLastName());
 
        custRepository.save(currCustomer);
        return new ResponseEntity<Customer>(currCustomer, HttpStatus.OK);
    } 
 
    // ------------------- Delete a User-----------------------------------------
 
    @RequestMapping(value = "/user/{id}", method = RequestMethod.DELETE)
    public ResponseEntity<?> deleteUser(@PathVariable("id") long id) {
        logger.info("Fetching & Deleting User with id {}", id);
 
        Optional<User> optUser = userRepository.findById(id);
        if (!optUser.isPresent()) {
            logger.error("Unable to delete. User with id {} not found.", id);
            return new ResponseEntity(new CustomErrorType("Unable to delete. User with id " + id + " not found."),
                    HttpStatus.NOT_FOUND);
        }
        userRepository.deleteById(id);
        return new ResponseEntity<User>(HttpStatus.NO_CONTENT);
    }
 
 
    // ------------------- Delete a Customer -----------------------------------------
 
    @RequestMapping(value = "/cust/{id}", method = RequestMethod.DELETE)
    public ResponseEntity<?> deleteCustomer(@PathVariable("id") String id) {
        logger.info("Fetching & Deleting Customer with id {}", id);
 
        Optional<Customer> optCust = custRepository.findById(id);
        if (!optCust.isPresent()) {
            logger.error("Unable to delete. Customer with id {} not found.", id);
            return new ResponseEntity(new CustomErrorType("Unable to delete. User with id " + id + " not found."),
                    HttpStatus.NOT_FOUND);
        }
        custRepository.deleteById(id);
        return new ResponseEntity<Customer>(HttpStatus.NO_CONTENT);
    }
    
    // ------------------- Delete All Users-----------------------------
 
    @RequestMapping(value = "/user/all", method = RequestMethod.DELETE)
    public ResponseEntity<User> deleteAllUsers() {
        logger.info("Deleting All Users");
 
        userRepository.deleteAll();
        return new ResponseEntity<User>(HttpStatus.NO_CONTENT);
    }
 
    // ------------------- Delete All Customers -----------------------------
 
    @RequestMapping(value = "/cust/all", method = RequestMethod.DELETE)
    public ResponseEntity<Customer> deleteAllCustomers() {
        logger.info("Deleting All Customers");
 
        custRepository.deleteAll();
        return new ResponseEntity<Customer>(HttpStatus.NO_CONTENT);
    } 
}